
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000002f6  0000038a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800066  00800066  00000390  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d8  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000294  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ec  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fb  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000101  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013f  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  8a:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <delay_us>:
void lcd_gotoxy2(unsigned char pos);
void lcd_exit(void);
void WaitMs(unsigned int ms);

void delay_us(unsigned int time)
{
  92:	ac 01       	movw	r20, r24
  94:	30 91 66 00 	lds	r19, 0x0066
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <delay_us+0xe>
	for(j=0;j<time;j++)
  9c:	2f 5f       	subi	r18, 0xFF	; 255
  9e:	3a e0       	ldi	r19, 0x0A	; 10
  a0:	82 2f       	mov	r24, r18
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	84 17       	cp	r24, r20
  a6:	95 07       	cpc	r25, r21
  a8:	c8 f3       	brcs	.-14     	; 0x9c <delay_us+0xa>
  aa:	30 93 66 00 	sts	0x0066, r19
  ae:	20 93 67 00 	sts	0x0067, r18
	{
		for(k=0;k<10;k++)
		{};
	}
}
  b2:	08 95       	ret

000000b4 <toggleE>:

void toggleE(void)
{
//WaitMs(1);
delay_us(100);
  b4:	84 e6       	ldi	r24, 0x64	; 100
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
SETBIT(PORTUSED,2);
  bc:	da 9a       	sbi	0x1b, 2	; 27
//WaitMs(1);
delay_us(100);
  be:	84 e6       	ldi	r24, 0x64	; 100
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 49 00 	call	0x92	; 0x92 <delay_us>
CLEARBIT(PORTUSED,2);
  c6:	da 98       	cbi	0x1b, 2	; 27
}
  c8:	08 95       	ret

000000ca <lcd_cmd>:

void lcd_cmd(unsigned char cmd)
{
  ca:	1f 93       	push	r17
  cc:	18 2f       	mov	r17, r24
	CLEARBIT(PORTUSED,0+2); // RS to 0 means select COmmand register, E to 0 ..
  ce:	da 98       	cbi	0x1b, 2	; 27
	PORTUSED=(cmd&0xF0)|(PORTUSED&(1<<3));			
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	91 2f       	mov	r25, r17
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	88 70       	andi	r24, 0x08	; 8
  d8:	98 2b       	or	r25, r24
  da:	9b bb       	out	0x1b, r25	; 27
	toggleE();
  dc:	0e 94 5a 00 	call	0xb4	; 0xb4 <toggleE>
	PORTUSED=((cmd&(0x0F))*16)|(PORTUSED&(1<<3));	
  e0:	8b b3       	in	r24, 0x1b	; 27
  e2:	12 95       	swap	r17
  e4:	10 7f       	andi	r17, 0xF0	; 240
  e6:	88 70       	andi	r24, 0x08	; 8
  e8:	81 2b       	or	r24, r17
  ea:	8b bb       	out	0x1b, r24	; 27
	toggleE();
  ec:	0e 94 5a 00 	call	0xb4	; 0xb4 <toggleE>
}
  f0:	1f 91       	pop	r17
  f2:	08 95       	ret

000000f4 <lcd_putchar>:
	lcd_cmd(LINE1);		// selects the cursor to first line first location...
	WaitMs(15);			
}

void lcd_putchar(unsigned char sig)
{
  f4:	1f 93       	push	r17
  f6:	18 2f       	mov	r17, r24
	PORTUSED=(sig&0xF0)|(PORTUSED&(1<<3));						
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	91 2f       	mov	r25, r17
  fc:	90 7f       	andi	r25, 0xF0	; 240
  fe:	88 70       	andi	r24, 0x08	; 8
 100:	98 2b       	or	r25, r24
 102:	9b bb       	out	0x1b, r25	; 27
	SETBIT(PORTA,0);		// selects dat register RS=1
 104:	d8 9a       	sbi	0x1b, 0	; 27
	toggleE();
 106:	0e 94 5a 00 	call	0xb4	; 0xb4 <toggleE>
	PORTUSED=((sig&(0x0F))*16)|(PORTUSED&(1<<3));
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	12 95       	swap	r17
 10e:	10 7f       	andi	r17, 0xF0	; 240
 110:	88 70       	andi	r24, 0x08	; 8
 112:	81 2b       	or	r24, r17
 114:	8b bb       	out	0x1b, r24	; 27
	SETBIT(PORTA,0);		// selects dat register RS=1
 116:	d8 9a       	sbi	0x1b, 0	; 27
	toggleE();
 118:	0e 94 5a 00 	call	0xb4	; 0xb4 <toggleE>
}
 11c:	1f 91       	pop	r17
 11e:	08 95       	ret

00000120 <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[64])
{
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	7c 01       	movw	r14, r24
	unsigned char k=0;
	CLEARBIT(PORTUSED,2);
 12c:	da 98       	cbi	0x1b, 2	; 27
 12e:	10 e0       	ldi	r17, 0x00	; 0
 130:	13 c0       	rjmp	.+38     	; 0x158 <lcd_string+0x38>
	while(str[k]!='\0')	//Till null character is encountered
		{
			
			PORTUSED=((str[k])&0xF0)|(PORTUSED&(1<<3));
 132:	8b b3       	in	r24, 0x1b	; 27
 134:	90 7f       	andi	r25, 0xF0	; 240
 136:	88 70       	andi	r24, 0x08	; 8
 138:	98 2b       	or	r25, r24
 13a:	9b bb       	out	0x1b, r25	; 27
			SETBIT(PORTA,0);			// selects dat register RS=1
 13c:	d8 9a       	sbi	0x1b, 0	; 27
			toggleE();
 13e:	0e 94 5a 00 	call	0xb4	; 0xb4 <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|(PORTUSED&(1<<3));
 142:	9b b3       	in	r25, 0x1b	; 27
 144:	88 81       	ld	r24, Y
 146:	82 95       	swap	r24
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	98 70       	andi	r25, 0x08	; 8
 14c:	89 2b       	or	r24, r25
 14e:	8b bb       	out	0x1b, r24	; 27
			SETBIT(PORTA,0);			// selects dat register RS=1
 150:	d8 9a       	sbi	0x1b, 0	; 27
			toggleE();
 152:	0e 94 5a 00 	call	0xb4	; 0xb4 <toggleE>
			k++;
 156:	1f 5f       	subi	r17, 0xFF	; 255

void lcd_string(unsigned char str[64])
{
	unsigned char k=0;
	CLEARBIT(PORTUSED,2);
	while(str[k]!='\0')	//Till null character is encountered
 158:	e7 01       	movw	r28, r14
 15a:	c1 0f       	add	r28, r17
 15c:	d1 1d       	adc	r29, r1
 15e:	98 81       	ld	r25, Y
 160:	99 23       	and	r25, r25
 162:	39 f7       	brne	.-50     	; 0x132 <lcd_string+0x12>
			PORTUSED=((str[k]&(0x0F))*16)|(PORTUSED&(1<<3));
			SETBIT(PORTA,0);			// selects dat register RS=1
			toggleE();
			k++;
		}
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	ff 90       	pop	r15
 16c:	ef 90       	pop	r14
 16e:	08 95       	ret

00000170 <lcd_gotoxy1>:
	lcd_char(O+0x30);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);     // write pos=0 if u want to select 1st location
 170:	80 58       	subi	r24, 0x80	; 128
 172:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
}
 176:	08 95       	ret

00000178 <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);		 // write pos=0 if u want to select 1st location
 178:	80 54       	subi	r24, 0x40	; 64
 17a:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
}
 17e:	08 95       	ret

00000180 <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 180:	89 30       	cpi	r24, 0x09	; 9
 182:	29 f4       	brne	.+10     	; 0x18e <lcd_char+0xe>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(' ');
 184:	80 e2       	ldi	r24, 0x20	; 32
 186:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_putchar>
 18a:	80 e2       	ldi	r24, 0x20	; 32
 18c:	06 c0       	rjmp	.+12     	; 0x19a <lcd_char+0x1a>
		}
	}
	else if(single=='\n')
 18e:	8a 30       	cpi	r24, 0x0A	; 10
 190:	21 f4       	brne	.+8      	; 0x19a <lcd_char+0x1a>
	{
		lcd_gotoxy2(0);	
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_gotoxy2>
 198:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 19a:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_putchar>
 19e:	08 95       	ret

000001a0 <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 1aa:	64 e6       	ldi	r22, 0x64	; 100
 1ac:	0e 94 46 01 	call	0x28c	; 0x28c <__udivmodqi4>
 1b0:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 1b2:	28 2f       	mov	r18, r24
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	8c e9       	ldi	r24, 0x9C	; 156
 1b8:	9f ef       	ldi	r25, 0xFF	; 255
 1ba:	28 9f       	mul	r18, r24
 1bc:	70 01       	movw	r14, r0
 1be:	29 9f       	mul	r18, r25
 1c0:	f0 0c       	add	r15, r0
 1c2:	38 9f       	mul	r19, r24
 1c4:	f0 0c       	add	r15, r0
 1c6:	11 24       	eor	r1, r1
 1c8:	c7 01       	movw	r24, r14
 1ca:	81 0f       	add	r24, r17
 1cc:	91 1d       	adc	r25, r1
 1ce:	6a e0       	ldi	r22, 0x0A	; 10
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__divmodhi4>
 1d6:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+0x30);
 1d8:	84 2f       	mov	r24, r20
 1da:	80 5d       	subi	r24, 0xD0	; 208
 1dc:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_char>
	lcd_char(T+0x30);
 1e0:	80 2f       	mov	r24, r16
 1e2:	80 5d       	subi	r24, 0xD0	; 208
 1e4:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_char>
	lcd_char(O+0x30);
 1e8:	10 5d       	subi	r17, 0xD0	; 208
 1ea:	1e 0d       	add	r17, r14
 1ec:	86 ef       	ldi	r24, 0xF6	; 246
 1ee:	9f ef       	ldi	r25, 0xFF	; 255
 1f0:	08 9f       	mul	r16, r24
 1f2:	00 2d       	mov	r16, r0
 1f4:	11 24       	eor	r1, r1
 1f6:	80 2f       	mov	r24, r16
 1f8:	81 0f       	add	r24, r17
 1fa:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_char>
}
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	ff 90       	pop	r15
 204:	ef 90       	pop	r14
 206:	08 95       	ret

00000208 <lcd_exit>:
}


void lcd_exit(void)
{
	PORTUSED=save;
 208:	80 91 68 00 	lds	r24, 0x0068
 20c:	8b bb       	out	0x1b, r24	; 27
}
 20e:	08 95       	ret

00000210 <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 210:	0a c0       	rjmp	.+20     	; 0x226 <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 216:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 218:	2f 5f       	subi	r18, 0xFF	; 255
 21a:	3f 4f       	sbci	r19, 0xFF	; 255
 21c:	4c e0       	ldi	r20, 0x0C	; 12
 21e:	2c 3c       	cpi	r18, 0xCC	; 204
 220:	34 07       	cpc	r19, r20
 222:	c9 f7       	brne	.-14     	; 0x216 <WaitMs+0x6>
 224:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	a1 f7       	brne	.-24     	; 0x212 <WaitMs+0x2>
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 22a:	08 95       	ret

0000022c <lcd_init>:
	toggleE();
}

void lcd_init(void)	//init the lcd 
{	
	save=PORTUSED;
 22c:	8b b3       	in	r24, 0x1b	; 27
 22e:	80 93 68 00 	sts	0x0068, r24
	DDRUSED=0xFF;		// declare it as an o/p port
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	8a bb       	out	0x1a, r24	; 26
	WaitMs(15);		// Given in datasheet ( Cmd for selecting 4 bit mode )
 236:	8f e0       	ldi	r24, 0x0F	; 15
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 08 01 	call	0x210	; 0x210 <WaitMs>
	lcd_cmd(0x03);
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
	WaitMs(45);
 244:	8d e2       	ldi	r24, 0x2D	; 45
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 08 01 	call	0x210	; 0x210 <WaitMs>
	lcd_cmd(0x02);
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
	WaitMs(15);
 252:	8f e0       	ldi	r24, 0x0F	; 15
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 08 01 	call	0x210	; 0x210 <WaitMs>
	CLEARBIT(PORTUSED,0+2);   // RS to 0 means select COmmand register, E to 0 ..
 25a:	da 98       	cbi	0x1b, 2	; 27
	//lcd_cmd(0x01);     // Cmd for clear display
	lcd_cmd(0x0F);		// Cmd for display ON and cursor blinking
 25c:	8f e0       	ldi	r24, 0x0F	; 15
 25e:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
	lcd_cmd(0x02);		// Cmd for returning home
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
	lcd_cmd(LINE1);		// selects the cursor to first line first location...
 268:	80 e8       	ldi	r24, 0x80	; 128
 26a:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
	WaitMs(15);			
 26e:	8f e0       	ldi	r24, 0x0F	; 15
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 08 01 	call	0x210	; 0x210 <WaitMs>
}
 276:	08 95       	ret

00000278 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<LCD_mega128.h>
void main()
{
  lcd_init();
 278:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_init>
  lcd_cmd(0x01);
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 65 00 	call	0xca	; 0xca <lcd_cmd>
    lcd_string("Hello");
 282:	80 e6       	ldi	r24, 0x60	; 96
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 90 00 	call	0x120	; 0x120 <lcd_string>
  
 28a:	08 95       	ret

0000028c <__udivmodqi4>:
 28c:	99 1b       	sub	r25, r25
 28e:	79 e0       	ldi	r23, 0x09	; 9
 290:	04 c0       	rjmp	.+8      	; 0x29a <__udivmodqi4_ep>

00000292 <__udivmodqi4_loop>:
 292:	99 1f       	adc	r25, r25
 294:	96 17       	cp	r25, r22
 296:	08 f0       	brcs	.+2      	; 0x29a <__udivmodqi4_ep>
 298:	96 1b       	sub	r25, r22

0000029a <__udivmodqi4_ep>:
 29a:	88 1f       	adc	r24, r24
 29c:	7a 95       	dec	r23
 29e:	c9 f7       	brne	.-14     	; 0x292 <__udivmodqi4_loop>
 2a0:	80 95       	com	r24
 2a2:	08 95       	ret

000002a4 <__divmodhi4>:
 2a4:	97 fb       	bst	r25, 7
 2a6:	09 2e       	mov	r0, r25
 2a8:	07 26       	eor	r0, r23
 2aa:	0a d0       	rcall	.+20     	; 0x2c0 <__divmodhi4_neg1>
 2ac:	77 fd       	sbrc	r23, 7
 2ae:	04 d0       	rcall	.+8      	; 0x2b8 <__divmodhi4_neg2>
 2b0:	0c d0       	rcall	.+24     	; 0x2ca <__udivmodhi4>
 2b2:	06 d0       	rcall	.+12     	; 0x2c0 <__divmodhi4_neg1>
 2b4:	00 20       	and	r0, r0
 2b6:	1a f4       	brpl	.+6      	; 0x2be <__divmodhi4_exit>

000002b8 <__divmodhi4_neg2>:
 2b8:	70 95       	com	r23
 2ba:	61 95       	neg	r22
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255

000002be <__divmodhi4_exit>:
 2be:	08 95       	ret

000002c0 <__divmodhi4_neg1>:
 2c0:	f6 f7       	brtc	.-4      	; 0x2be <__divmodhi4_exit>
 2c2:	90 95       	com	r25
 2c4:	81 95       	neg	r24
 2c6:	9f 4f       	sbci	r25, 0xFF	; 255
 2c8:	08 95       	ret

000002ca <__udivmodhi4>:
 2ca:	aa 1b       	sub	r26, r26
 2cc:	bb 1b       	sub	r27, r27
 2ce:	51 e1       	ldi	r21, 0x11	; 17
 2d0:	07 c0       	rjmp	.+14     	; 0x2e0 <__udivmodhi4_ep>

000002d2 <__udivmodhi4_loop>:
 2d2:	aa 1f       	adc	r26, r26
 2d4:	bb 1f       	adc	r27, r27
 2d6:	a6 17       	cp	r26, r22
 2d8:	b7 07       	cpc	r27, r23
 2da:	10 f0       	brcs	.+4      	; 0x2e0 <__udivmodhi4_ep>
 2dc:	a6 1b       	sub	r26, r22
 2de:	b7 0b       	sbc	r27, r23

000002e0 <__udivmodhi4_ep>:
 2e0:	88 1f       	adc	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	5a 95       	dec	r21
 2e6:	a9 f7       	brne	.-22     	; 0x2d2 <__udivmodhi4_loop>
 2e8:	80 95       	com	r24
 2ea:	90 95       	com	r25
 2ec:	bc 01       	movw	r22, r24
 2ee:	cd 01       	movw	r24, r26
 2f0:	08 95       	ret

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
