
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000078  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000069f  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000010c  00000000  00000000  00000977  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000411  00000000  00000000  00000a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000fb  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002b8  00000000  00000000  0000101f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  64:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <forward>:
void diff_left();
void axial_left();

void forward()
{
  PORTB = 0b00001010;
  6c:	8a e0       	ldi	r24, 0x0A	; 10
  6e:	88 bb       	out	0x18, r24	; 24
}
  70:	08 95       	ret

00000072 <reverse>:

void reverse()
{
  PORTB = 0b00000101; 
  72:	85 e0       	ldi	r24, 0x05	; 5
  74:	88 bb       	out	0x18, r24	; 24
}
  76:	08 95       	ret

00000078 <stop>:

void stop()
{
  PORTB = 0b00000000;
  78:	18 ba       	out	0x18, r1	; 24
}
  7a:	08 95       	ret

0000007c <diff_right>:

void diff_right()
{
  PORTB = 0b00000010;
  7c:	82 e0       	ldi	r24, 0x02	; 2
  7e:	88 bb       	out	0x18, r24	; 24
}
  80:	08 95       	ret

00000082 <axial_right>:

void axial_right()
{
  PORTB = 0b00000110;
  82:	86 e0       	ldi	r24, 0x06	; 6
  84:	88 bb       	out	0x18, r24	; 24
}
  86:	08 95       	ret

00000088 <diff_left>:

void diff_left()
{
  PORTB = 0b00000001;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	88 bb       	out	0x18, r24	; 24
}
  8c:	08 95       	ret

0000008e <axial_left>:

void axial_left()
{
  PORTB = 0b00001001;
  8e:	89 e0       	ldi	r24, 0x09	; 9
  90:	88 bb       	out	0x18, r24	; 24
  92:	08 95       	ret

00000094 <main>:
#include"motor.h"
#include<util/delay.h>

main()
{
  DDRB = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	87 bb       	out	0x17, r24	; 23
void diff_left();
void axial_left();

void forward()
{
  PORTB = 0b00001010;
  98:	8a e0       	ldi	r24, 0x0A	; 10
  9a:	88 bb       	out	0x18, r24	; 24
  9c:	80 e5       	ldi	r24, 0x50	; 80
  9e:	93 ec       	ldi	r25, 0xC3	; 195
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	28 ec       	ldi	r18, 0xC8	; 200
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	f9 01       	movw	r30, r18
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ac:	d9 f7       	brne	.-10     	; 0xa4 <main+0x10>
  PORTB = 0b00000010;
}

void axial_right()
{
  PORTB = 0b00000110;
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	88 bb       	out	0x18, r24	; 24
  b2:	80 e1       	ldi	r24, 0x10	; 16
  b4:	97 e2       	ldi	r25, 0x27	; 39
  b6:	28 ec       	ldi	r18, 0xC8	; 200
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <main+0x26>
void diff_left();
void axial_left();

void forward()
{
  PORTB = 0b00001010;
  c4:	8a e0       	ldi	r24, 0x0A	; 10
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	80 e5       	ldi	r24, 0x50	; 80
  ca:	93 ec       	ldi	r25, 0xC3	; 195
  cc:	28 ec       	ldi	r18, 0xC8	; 200
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d8:	d9 f7       	brne	.-10     	; 0xd0 <main+0x3c>
  PORTB = 0b00000001;
}

void axial_left()
{
  PORTB = 0b00001001;
  da:	89 e0       	ldi	r24, 0x09	; 9
  dc:	88 bb       	out	0x18, r24	; 24
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	97 e2       	ldi	r25, 0x27	; 39
  e2:	28 ec       	ldi	r18, 0xC8	; 200
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	f9 01       	movw	r30, r18
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	d9 f7       	brne	.-10     	; 0xe6 <main+0x52>
void diff_left();
void axial_left();

void forward()
{
  PORTB = 0b00001010;
  f0:	8a e0       	ldi	r24, 0x0A	; 10
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	80 e5       	ldi	r24, 0x50	; 80
  f6:	93 ec       	ldi	r25, 0xC3	; 195
  f8:	28 ec       	ldi	r18, 0xC8	; 200
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 102:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 104:	d9 f7       	brne	.-10     	; 0xfc <main+0x68>
  PORTB = 0b00000001;
}

void axial_left()
{
  PORTB = 0b00001001;
 106:	89 e0       	ldi	r24, 0x09	; 9
 108:	88 bb       	out	0x18, r24	; 24
 10a:	80 e1       	ldi	r24, 0x10	; 16
 10c:	97 e2       	ldi	r25, 0x27	; 39
 10e:	28 ec       	ldi	r18, 0xC8	; 200
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	f9 01       	movw	r30, r18
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 118:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11a:	d9 f7       	brne	.-10     	; 0x112 <main+0x7e>
void diff_left();
void axial_left();

void forward()
{
  PORTB = 0b00001010;
 11c:	8a e0       	ldi	r24, 0x0A	; 10
 11e:	88 bb       	out	0x18, r24	; 24
 120:	80 e5       	ldi	r24, 0x50	; 80
 122:	93 ec       	ldi	r25, 0xC3	; 195
 124:	28 ec       	ldi	r18, 0xC8	; 200
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x96>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 130:	d9 f7       	brne	.-10     	; 0x128 <main+0x94>
  PORTB = 0b00000001;
}

void axial_left()
{
  PORTB = 0b00001001;
 132:	89 e0       	ldi	r24, 0x09	; 9
 134:	88 bb       	out	0x18, r24	; 24
 136:	80 e1       	ldi	r24, 0x10	; 16
 138:	97 e2       	ldi	r25, 0x27	; 39
 13a:	28 ec       	ldi	r18, 0xC8	; 200
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	f9 01       	movw	r30, r18
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0xac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 144:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 146:	d9 f7       	brne	.-10     	; 0x13e <main+0xaa>
void diff_left();
void axial_left();

void forward()
{
  PORTB = 0b00001010;
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	88 bb       	out	0x18, r24	; 24
 14c:	80 e5       	ldi	r24, 0x50	; 80
 14e:	93 ec       	ldi	r25, 0xC3	; 195
 150:	28 ec       	ldi	r18, 0xC8	; 200
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	f9 01       	movw	r30, r18
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <main+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 15a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 15c:	d9 f7       	brne	.-10     	; 0x154 <main+0xc0>
  PORTB = 0b00000001;
}

void axial_left()
{
  PORTB = 0b00001001;
 15e:	89 e0       	ldi	r24, 0x09	; 9
 160:	88 bb       	out	0x18, r24	; 24
 162:	80 e1       	ldi	r24, 0x10	; 16
 164:	97 e2       	ldi	r25, 0x27	; 39
 166:	28 ec       	ldi	r18, 0xC8	; 200
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <main+0xd8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 170:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 172:	d9 f7       	brne	.-10     	; 0x16a <main+0xd6>
void diff_left();
void axial_left();

void forward()
{
  PORTB = 0b00001010;
 174:	8a e0       	ldi	r24, 0x0A	; 10
 176:	88 bb       	out	0x18, r24	; 24
 178:	80 e5       	ldi	r24, 0x50	; 80
 17a:	93 ec       	ldi	r25, 0xC3	; 195
 17c:	28 ec       	ldi	r18, 0xC8	; 200
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0xee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 186:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 188:	d9 f7       	brne	.-10     	; 0x180 <main+0xec>
  PORTB = 0b00000010;
}

void axial_right()
{
  PORTB = 0b00000110;
 18a:	86 e0       	ldi	r24, 0x06	; 6
 18c:	88 bb       	out	0x18, r24	; 24
 18e:	80 e1       	ldi	r24, 0x10	; 16
 190:	97 e2       	ldi	r25, 0x27	; 39
 192:	28 ec       	ldi	r18, 0xC8	; 200
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0x104>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19e:	d9 f7       	brne	.-10     	; 0x196 <main+0x102>
void diff_left();
void axial_left();

void forward()
{
  PORTB = 0b00001010;
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	88 bb       	out	0x18, r24	; 24
 1a4:	80 e5       	ldi	r24, 0x50	; 80
 1a6:	93 ec       	ldi	r25, 0xC3	; 195
 1a8:	28 ec       	ldi	r18, 0xC8	; 200
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x11a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b4:	d9 f7       	brne	.-10     	; 0x1ac <main+0x118>
  PORTB = 0b00000010;
}

void axial_right()
{
  PORTB = 0b00000110;
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	88 bb       	out	0x18, r24	; 24
 1ba:	80 e1       	ldi	r24, 0x10	; 16
 1bc:	97 e2       	ldi	r25, 0x27	; 39
 1be:	28 ec       	ldi	r18, 0xC8	; 200
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	f9 01       	movw	r30, r18
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x130>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ca:	d9 f7       	brne	.-10     	; 0x1c2 <main+0x12e>
void diff_left();
void axial_left();

void forward()
{
  PORTB = 0b00001010;
 1cc:	8a e0       	ldi	r24, 0x0A	; 10
 1ce:	88 bb       	out	0x18, r24	; 24
 1d0:	80 e5       	ldi	r24, 0x50	; 80
 1d2:	93 ec       	ldi	r25, 0xC3	; 195
 1d4:	28 ec       	ldi	r18, 0xC8	; 200
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	f9 01       	movw	r30, r18
 1da:	31 97       	sbiw	r30, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x146>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e0:	d9 f7       	brne	.-10     	; 0x1d8 <main+0x144>
  
  axial_right();
  _delay_ms(1000);
  forward();
  _delay_ms(5000);
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	08 95       	ret

000001e8 <_exit>:
 1e8:	f8 94       	cli

000001ea <__stop_program>:
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <__stop_program>
