
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000034e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800070  00800070  000003f2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000135  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003c9  00000000  00000000  00000547  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019d  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000049a  00000000  00000000  00000aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00000f48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000184  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018f  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000013ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 50 01 	call	0x2a0	; 0x2a0 <main>
  8a:	0c 94 a5 01 	jmp	0x34a	; 0x34a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <forward>:
void diff_left();
void axial_left();

void forward()
{
  PORTB = 0b00001010;
  92:	8a e0       	ldi	r24, 0x0A	; 10
  94:	88 bb       	out	0x18, r24	; 24
}
  96:	08 95       	ret

00000098 <reverse>:

void reverse()
{
  PORTB = 0b00000101; 
  98:	85 e0       	ldi	r24, 0x05	; 5
  9a:	88 bb       	out	0x18, r24	; 24
}
  9c:	08 95       	ret

0000009e <stop>:

void stop()
{
  PORTB = 0b00000000;
  9e:	18 ba       	out	0x18, r1	; 24
}
  a0:	08 95       	ret

000000a2 <diff_right>:

void diff_right()
{
  PORTB = 0b00000010;
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	88 bb       	out	0x18, r24	; 24
}
  a6:	08 95       	ret

000000a8 <axial_right>:

void axial_right()
{
  PORTB = 0b00000110;
  a8:	86 e0       	ldi	r24, 0x06	; 6
  aa:	88 bb       	out	0x18, r24	; 24
}
  ac:	08 95       	ret

000000ae <diff_left>:

void diff_left()
{
  PORTB = 0b00000001;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	88 bb       	out	0x18, r24	; 24
}
  b2:	08 95       	ret

000000b4 <axial_left>:

void axial_left()
{
  PORTB = 0b00001001;
  b4:	89 e0       	ldi	r24, 0x09	; 9
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	08 95       	ret

000000ba <delay_us>:
void lcd_gotoxy2(unsigned char pos);
void lcd_exit(void);
void WaitMs(unsigned int ms);

void delay_us(unsigned int time)
{
  ba:	ac 01       	movw	r20, r24
  bc:	30 91 70 00 	lds	r19, 0x0070
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <delay_us+0xe>
	for(j=0;j<time;j++)
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3a e0       	ldi	r19, 0x0A	; 10
  c8:	82 2f       	mov	r24, r18
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	84 17       	cp	r24, r20
  ce:	95 07       	cpc	r25, r21
  d0:	c8 f3       	brcs	.-14     	; 0xc4 <delay_us+0xa>
  d2:	30 93 70 00 	sts	0x0070, r19
  d6:	20 93 71 00 	sts	0x0071, r18
	{
		for(k=0;k<10;k++)
		{};
	}
}
  da:	08 95       	ret

000000dc <toggleE>:

void toggleE(void)
{
//WaitMs(1);
delay_us(100);
  dc:	84 e6       	ldi	r24, 0x64	; 100
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 5d 00 	call	0xba	; 0xba <delay_us>
SETBIT(PORTUSED,2);
  e4:	da 9a       	sbi	0x1b, 2	; 27
//WaitMs(1);
delay_us(100);
  e6:	84 e6       	ldi	r24, 0x64	; 100
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 5d 00 	call	0xba	; 0xba <delay_us>
CLEARBIT(PORTUSED,2);
  ee:	da 98       	cbi	0x1b, 2	; 27
}
  f0:	08 95       	ret

000000f2 <lcd_cmd>:

void lcd_cmd(unsigned char cmd)
{
  f2:	1f 93       	push	r17
  f4:	18 2f       	mov	r17, r24
	CLEARBIT(PORTUSED,0+2); // RS to 0 means select COmmand register, E to 0 ..
  f6:	da 98       	cbi	0x1b, 2	; 27
	PORTUSED=(cmd&0xF0)|(PORTUSED&(1<<3));			
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	91 2f       	mov	r25, r17
  fc:	90 7f       	andi	r25, 0xF0	; 240
  fe:	88 70       	andi	r24, 0x08	; 8
 100:	98 2b       	or	r25, r24
 102:	9b bb       	out	0x1b, r25	; 27
	toggleE();
 104:	0e 94 6e 00 	call	0xdc	; 0xdc <toggleE>
	PORTUSED=((cmd&(0x0F))*16)|(PORTUSED&(1<<3));	
 108:	8b b3       	in	r24, 0x1b	; 27
 10a:	12 95       	swap	r17
 10c:	10 7f       	andi	r17, 0xF0	; 240
 10e:	88 70       	andi	r24, 0x08	; 8
 110:	81 2b       	or	r24, r17
 112:	8b bb       	out	0x1b, r24	; 27
	toggleE();
 114:	0e 94 6e 00 	call	0xdc	; 0xdc <toggleE>
}
 118:	1f 91       	pop	r17
 11a:	08 95       	ret

0000011c <lcd_putchar>:
	lcd_cmd(LINE1);		// selects the cursor to first line first location...
	WaitMs(15);			
}

void lcd_putchar(unsigned char sig)
{
 11c:	1f 93       	push	r17
 11e:	18 2f       	mov	r17, r24
	PORTUSED=(sig&0xF0)|(PORTUSED&(1<<3));						
 120:	8b b3       	in	r24, 0x1b	; 27
 122:	91 2f       	mov	r25, r17
 124:	90 7f       	andi	r25, 0xF0	; 240
 126:	88 70       	andi	r24, 0x08	; 8
 128:	98 2b       	or	r25, r24
 12a:	9b bb       	out	0x1b, r25	; 27
	SETBIT(PORTA,0);		// selects dat register RS=1
 12c:	d8 9a       	sbi	0x1b, 0	; 27
	toggleE();
 12e:	0e 94 6e 00 	call	0xdc	; 0xdc <toggleE>
	PORTUSED=((sig&(0x0F))*16)|(PORTUSED&(1<<3));
 132:	8b b3       	in	r24, 0x1b	; 27
 134:	12 95       	swap	r17
 136:	10 7f       	andi	r17, 0xF0	; 240
 138:	88 70       	andi	r24, 0x08	; 8
 13a:	81 2b       	or	r24, r17
 13c:	8b bb       	out	0x1b, r24	; 27
	SETBIT(PORTA,0);		// selects dat register RS=1
 13e:	d8 9a       	sbi	0x1b, 0	; 27
	toggleE();
 140:	0e 94 6e 00 	call	0xdc	; 0xdc <toggleE>
}
 144:	1f 91       	pop	r17
 146:	08 95       	ret

00000148 <lcd_string>:
		lcd_putchar(single);
	}
}

void lcd_string(unsigned char str[64])
{
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	7c 01       	movw	r14, r24
	unsigned char k=0;
	CLEARBIT(PORTUSED,2);
 154:	da 98       	cbi	0x1b, 2	; 27
 156:	10 e0       	ldi	r17, 0x00	; 0
 158:	13 c0       	rjmp	.+38     	; 0x180 <lcd_string+0x38>
	while(str[k]!='\0')	//Till null character is encountered
		{
			
			PORTUSED=((str[k])&0xF0)|(PORTUSED&(1<<3));
 15a:	8b b3       	in	r24, 0x1b	; 27
 15c:	90 7f       	andi	r25, 0xF0	; 240
 15e:	88 70       	andi	r24, 0x08	; 8
 160:	98 2b       	or	r25, r24
 162:	9b bb       	out	0x1b, r25	; 27
			SETBIT(PORTA,0);			// selects dat register RS=1
 164:	d8 9a       	sbi	0x1b, 0	; 27
			toggleE();
 166:	0e 94 6e 00 	call	0xdc	; 0xdc <toggleE>
			PORTUSED=((str[k]&(0x0F))*16)|(PORTUSED&(1<<3));
 16a:	9b b3       	in	r25, 0x1b	; 27
 16c:	88 81       	ld	r24, Y
 16e:	82 95       	swap	r24
 170:	80 7f       	andi	r24, 0xF0	; 240
 172:	98 70       	andi	r25, 0x08	; 8
 174:	89 2b       	or	r24, r25
 176:	8b bb       	out	0x1b, r24	; 27
			SETBIT(PORTA,0);			// selects dat register RS=1
 178:	d8 9a       	sbi	0x1b, 0	; 27
			toggleE();
 17a:	0e 94 6e 00 	call	0xdc	; 0xdc <toggleE>
			k++;
 17e:	1f 5f       	subi	r17, 0xFF	; 255

void lcd_string(unsigned char str[64])
{
	unsigned char k=0;
	CLEARBIT(PORTUSED,2);
	while(str[k]!='\0')	//Till null character is encountered
 180:	e7 01       	movw	r28, r14
 182:	c1 0f       	add	r28, r17
 184:	d1 1d       	adc	r29, r1
 186:	98 81       	ld	r25, Y
 188:	99 23       	and	r25, r25
 18a:	39 f7       	brne	.-50     	; 0x15a <lcd_string+0x12>
			PORTUSED=((str[k]&(0x0F))*16)|(PORTUSED&(1<<3));
			SETBIT(PORTA,0);			// selects dat register RS=1
			toggleE();
			k++;
		}
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	08 95       	ret

00000198 <lcd_gotoxy1>:
	lcd_char(O+0x30);
}

void lcd_gotoxy1(unsigned char pos)
{
	lcd_cmd(LINE1+pos);     // write pos=0 if u want to select 1st location
 198:	80 58       	subi	r24, 0x80	; 128
 19a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
}
 19e:	08 95       	ret

000001a0 <lcd_gotoxy2>:

void lcd_gotoxy2(unsigned char pos)
{
	lcd_cmd(LINE2+pos);		 // write pos=0 if u want to select 1st location
 1a0:	80 54       	subi	r24, 0x40	; 64
 1a2:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
}
 1a6:	08 95       	ret

000001a8 <lcd_char>:
}

void lcd_char(unsigned char single)
{
	int i;
	if(single =='\t')
 1a8:	89 30       	cpi	r24, 0x09	; 9
 1aa:	29 f4       	brne	.+10     	; 0x1b6 <lcd_char+0xe>
	{
		for(i =0 ; i<2 ; i++)
		{	
		lcd_putchar(' ');
 1ac:	80 e2       	ldi	r24, 0x20	; 32
 1ae:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_putchar>
 1b2:	80 e2       	ldi	r24, 0x20	; 32
 1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <lcd_char+0x1a>
		}
	}
	else if(single=='\n')
 1b6:	8a 30       	cpi	r24, 0x0A	; 10
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <lcd_char+0x1a>
	{
		lcd_gotoxy2(0);	
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_gotoxy2>
 1c0:	08 95       	ret
	}
	else 
	{
		lcd_putchar(single);
 1c2:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_putchar>
 1c6:	08 95       	ret

000001c8 <lcd_showvalue>:
		}
}


void lcd_showvalue(unsigned char num)	//prints the decimal 3digit value of num
{
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	18 2f       	mov	r17, r24
	unsigned char H=0,T=0,O=0;
	H=num/100;
 1d2:	64 e6       	ldi	r22, 0x64	; 100
 1d4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__udivmodqi4>
 1d8:	48 2f       	mov	r20, r24
	T=(num - (H*100))/10;
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	8c e9       	ldi	r24, 0x9C	; 156
 1e0:	9f ef       	ldi	r25, 0xFF	; 255
 1e2:	28 9f       	mul	r18, r24
 1e4:	70 01       	movw	r14, r0
 1e6:	29 9f       	mul	r18, r25
 1e8:	f0 0c       	add	r15, r0
 1ea:	38 9f       	mul	r19, r24
 1ec:	f0 0c       	add	r15, r0
 1ee:	11 24       	eor	r1, r1
 1f0:	c7 01       	movw	r24, r14
 1f2:	81 0f       	add	r24, r17
 1f4:	91 1d       	adc	r25, r1
 1f6:	6a e0       	ldi	r22, 0x0A	; 10
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__divmodhi4>
 1fe:	06 2f       	mov	r16, r22
	O=(num - (H*100) - (T*10));
	
	lcd_char(H+0x30);
 200:	84 2f       	mov	r24, r20
 202:	80 5d       	subi	r24, 0xD0	; 208
 204:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_char>
	lcd_char(T+0x30);
 208:	80 2f       	mov	r24, r16
 20a:	80 5d       	subi	r24, 0xD0	; 208
 20c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_char>
	lcd_char(O+0x30);
 210:	10 5d       	subi	r17, 0xD0	; 208
 212:	1e 0d       	add	r17, r14
 214:	86 ef       	ldi	r24, 0xF6	; 246
 216:	9f ef       	ldi	r25, 0xFF	; 255
 218:	08 9f       	mul	r16, r24
 21a:	00 2d       	mov	r16, r0
 21c:	11 24       	eor	r1, r1
 21e:	80 2f       	mov	r24, r16
 220:	81 0f       	add	r24, r17
 222:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_char>
}
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	ff 90       	pop	r15
 22c:	ef 90       	pop	r14
 22e:	08 95       	ret

00000230 <lcd_exit>:
}


void lcd_exit(void)
{
	PORTUSED=save;
 230:	80 91 72 00 	lds	r24, 0x0072
 234:	8b bb       	out	0x1b, r24	; 27
}
 236:	08 95       	ret

00000238 <WaitMs>:

/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
 238:	0a c0       	rjmp	.+20     	; 0x24e <WaitMs+0x16>
	int i;

	while (ms-- > 0)
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
	{
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
 23e:	00 00       	nop

	while (ms-- > 0)
	{
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
 240:	2f 5f       	subi	r18, 0xFF	; 255
 242:	3f 4f       	sbci	r19, 0xFF	; 255
 244:	4c e0       	ldi	r20, 0x0C	; 12
 246:	2c 3c       	cpi	r18, 0xCC	; 204
 248:	34 07       	cpc	r19, r20
 24a:	c9 f7       	brne	.-14     	; 0x23e <WaitMs+0x6>
 24c:	01 97       	sbiw	r24, 0x01	; 1
/* waits (pauses) for ms milliseconds (assumes clock at 16MHz) */
void WaitMs(unsigned int ms)
{
	int i;

	while (ms-- > 0)
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	a1 f7       	brne	.-24     	; 0x23a <WaitMs+0x2>
		/* 16384 (16k) clock cycles for 1ms; each time through loop
		   is 5 cycles (for loop control + nop) */
		for (i = 0; i < 3276; ++i)
			asm("nop");
	}
}
 252:	08 95       	ret

00000254 <lcd_init>:
	toggleE();
}

void lcd_init(void)	//init the lcd 
{	
	save=PORTUSED;
 254:	8b b3       	in	r24, 0x1b	; 27
 256:	80 93 72 00 	sts	0x0072, r24
	DDRUSED=0xFF;		// declare it as an o/p port
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	8a bb       	out	0x1a, r24	; 26
	WaitMs(15);		// Given in datasheet ( Cmd for selecting 4 bit mode )
 25e:	8f e0       	ldi	r24, 0x0F	; 15
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 1c 01 	call	0x238	; 0x238 <WaitMs>
	lcd_cmd(0x03);
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
	WaitMs(45);
 26c:	8d e2       	ldi	r24, 0x2D	; 45
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 1c 01 	call	0x238	; 0x238 <WaitMs>
	lcd_cmd(0x02);
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
	WaitMs(15);
 27a:	8f e0       	ldi	r24, 0x0F	; 15
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 1c 01 	call	0x238	; 0x238 <WaitMs>
	CLEARBIT(PORTUSED,0+2);   // RS to 0 means select COmmand register, E to 0 ..
 282:	da 98       	cbi	0x1b, 2	; 27
	//lcd_cmd(0x01);     // Cmd for clear display
	lcd_cmd(0x0F);		// Cmd for display ON and cursor blinking
 284:	8f e0       	ldi	r24, 0x0F	; 15
 286:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
	lcd_cmd(0x02);		// Cmd for returning home
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
	lcd_cmd(LINE1);		// selects the cursor to first line first location...
 290:	80 e8       	ldi	r24, 0x80	; 128
 292:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
	WaitMs(15);			
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 1c 01 	call	0x238	; 0x238 <WaitMs>
}
 29e:	08 95       	ret

000002a0 <main>:
#include<motor.h>
#include<util/delay.h>
#include<LCD_mega128.h>

void main()
{
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
  // LCD initialization
  lcd_init();
 2a4:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_init>
  lcd_cmd(0x01);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>

  // DTMF intialization
  DDRD = 0b000000000;
 2ae:	11 ba       	out	0x11, r1	; 17
  PORTD = 0xff;
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	82 bb       	out	0x12, r24	; 18

  // MOTORS initialization
  DDRB = 0xFF;
 2b4:	87 bb       	out	0x17, r24	; 23

  while(1)
  {
    if((PINA&15)==2)     // if Key 2 of cell phone pressed
 2b6:	89 b3       	in	r24, 0x19	; 25
 2b8:	8f 70       	andi	r24, 0x0F	; 15
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	11 f4       	brne	.+4      	; 0x2c2 <main+0x22>
void diff_left();
void axial_left();

void forward()
{
  PORTB = 0b00001010;
 2be:	8a e0       	ldi	r24, 0x0A	; 10
 2c0:	88 bb       	out	0x18, r24	; 24
        forward();
        lcd_string("Moving Straight");
 2c2:	80 e6       	ldi	r24, 0x60	; 96
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_string>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ca:	c8 ec       	ldi	r28, 0xC8	; 200
 2cc:	d0 e0       	ldi	r29, 0x00	; 0
        while(1)
        {
            lcd_cmd(0x18);
 2ce:	88 e1       	ldi	r24, 0x18	; 24
 2d0:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_cmd>
 2d4:	80 e1       	ldi	r24, 0x10	; 16
 2d6:	97 e2       	ldi	r25, 0x27	; 39
 2d8:	fe 01       	movw	r30, r28
 2da:	31 97       	sbiw	r30, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <main+0x3a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e0:	d9 f7       	brne	.-10     	; 0x2d8 <main+0x38>
 2e2:	f5 cf       	rjmp	.-22     	; 0x2ce <main+0x2e>

000002e4 <__udivmodqi4>:
 2e4:	99 1b       	sub	r25, r25
 2e6:	79 e0       	ldi	r23, 0x09	; 9
 2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <__udivmodqi4_ep>

000002ea <__udivmodqi4_loop>:
 2ea:	99 1f       	adc	r25, r25
 2ec:	96 17       	cp	r25, r22
 2ee:	08 f0       	brcs	.+2      	; 0x2f2 <__udivmodqi4_ep>
 2f0:	96 1b       	sub	r25, r22

000002f2 <__udivmodqi4_ep>:
 2f2:	88 1f       	adc	r24, r24
 2f4:	7a 95       	dec	r23
 2f6:	c9 f7       	brne	.-14     	; 0x2ea <__udivmodqi4_loop>
 2f8:	80 95       	com	r24
 2fa:	08 95       	ret

000002fc <__divmodhi4>:
 2fc:	97 fb       	bst	r25, 7
 2fe:	09 2e       	mov	r0, r25
 300:	07 26       	eor	r0, r23
 302:	0a d0       	rcall	.+20     	; 0x318 <__divmodhi4_neg1>
 304:	77 fd       	sbrc	r23, 7
 306:	04 d0       	rcall	.+8      	; 0x310 <__divmodhi4_neg2>
 308:	0c d0       	rcall	.+24     	; 0x322 <__udivmodhi4>
 30a:	06 d0       	rcall	.+12     	; 0x318 <__divmodhi4_neg1>
 30c:	00 20       	and	r0, r0
 30e:	1a f4       	brpl	.+6      	; 0x316 <__divmodhi4_exit>

00000310 <__divmodhi4_neg2>:
 310:	70 95       	com	r23
 312:	61 95       	neg	r22
 314:	7f 4f       	sbci	r23, 0xFF	; 255

00000316 <__divmodhi4_exit>:
 316:	08 95       	ret

00000318 <__divmodhi4_neg1>:
 318:	f6 f7       	brtc	.-4      	; 0x316 <__divmodhi4_exit>
 31a:	90 95       	com	r25
 31c:	81 95       	neg	r24
 31e:	9f 4f       	sbci	r25, 0xFF	; 255
 320:	08 95       	ret

00000322 <__udivmodhi4>:
 322:	aa 1b       	sub	r26, r26
 324:	bb 1b       	sub	r27, r27
 326:	51 e1       	ldi	r21, 0x11	; 17
 328:	07 c0       	rjmp	.+14     	; 0x338 <__udivmodhi4_ep>

0000032a <__udivmodhi4_loop>:
 32a:	aa 1f       	adc	r26, r26
 32c:	bb 1f       	adc	r27, r27
 32e:	a6 17       	cp	r26, r22
 330:	b7 07       	cpc	r27, r23
 332:	10 f0       	brcs	.+4      	; 0x338 <__udivmodhi4_ep>
 334:	a6 1b       	sub	r26, r22
 336:	b7 0b       	sbc	r27, r23

00000338 <__udivmodhi4_ep>:
 338:	88 1f       	adc	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	5a 95       	dec	r21
 33e:	a9 f7       	brne	.-22     	; 0x32a <__udivmodhi4_loop>
 340:	80 95       	com	r24
 342:	90 95       	com	r25
 344:	bc 01       	movw	r22, r24
 346:	cd 01       	movw	r24, r26
 348:	08 95       	ret

0000034a <_exit>:
 34a:	f8 94       	cli

0000034c <__stop_program>:
 34c:	ff cf       	rjmp	.-2      	; 0x34c <__stop_program>
