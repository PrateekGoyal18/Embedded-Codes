
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003f  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000c4  00000000  00000000  00000155  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000007d  00000000  00000000  00000219  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000f8  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000099  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <forward>:

#include<avr/io.h>

void forward()
{
  PORTC&=~(1<<0);
  6c:	a8 98       	cbi	0x15, 0	; 21
  PORTC|=(1<<1);
  6e:	a9 9a       	sbi	0x15, 1	; 21
  PORTC&=~(1<<2);
  70:	aa 98       	cbi	0x15, 2	; 21
  PORTC|=(1<<3);
  72:	ab 9a       	sbi	0x15, 3	; 21
}
  74:	08 95       	ret

00000076 <stop>:

void stop()
{
  PORTC&=~(1<<0);
  76:	a8 98       	cbi	0x15, 0	; 21
  PORTC&=~(1<<1);
  78:	a9 98       	cbi	0x15, 1	; 21
  PORTC&=~(1<<2);
  7a:	aa 98       	cbi	0x15, 2	; 21
  PORTC&=~(1<<3);
  7c:	ab 98       	cbi	0x15, 3	; 21
}
  7e:	08 95       	ret

00000080 <motor_init>:

void motor_init()
{
  DDRC=0B00001111;
  80:	8f e0       	ldi	r24, 0x0F	; 15
  82:	84 bb       	out	0x14, r24	; 20
}
  84:	08 95       	ret

00000086 <main>:
  PORTC&=~(1<<3);
}

void motor_init()
{
  DDRC=0B00001111;
  86:	8f e0       	ldi	r24, 0x0F	; 15
  88:	84 bb       	out	0x14, r24	; 20
}

int main()
{
  motor_init();
  DDRA&=~(1<<1);
  8a:	d1 98       	cbi	0x1a, 1	; 26
  PORTA|=(1<<1);
  8c:	d9 9a       	sbi	0x1b, 1	; 27
  while(1)
  {
    if(!(PINA&(1<<1)))
  8e:	c9 99       	sbic	0x19, 1	; 25
  90:	03 c0       	rjmp	.+6      	; 0x98 <main+0x12>
    stop();
  92:	0e 94 3b 00 	call	0x76	; 0x76 <stop>
  96:	fb cf       	rjmp	.-10     	; 0x8e <main+0x8>
	
    else
    forward();
  98:	0e 94 36 00 	call	0x6c	; 0x6c <forward>
  9c:	f8 cf       	rjmp	.-16     	; 0x8e <main+0x8>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
